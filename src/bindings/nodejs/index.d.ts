/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** File event for Node.js */
export interface JsFileEvent {
  path: string
  eventType: string
  timestamp: string
  size: string
  isDirectory: boolean
  hash?: JsHashResult
}
/** Hash result for Node.js */
export interface JsHashResult {
  hash: string
  size: number
  isIncremental: boolean
}
/** Watcher statistics for Node.js */
export interface JsWatcherStats {
  pendingEvents: number
  bufferCapacity: number
  droppedEvents: string
  totalEvents: string
  watchedDirectories: number
}
/** Watch options for directories */
export interface WatchOptions {
  recursive?: boolean
  includePatterns?: Array<string>
  excludePatterns?: Array<string>
  enableHashing?: boolean
  hashBlockSize?: number
}
/** Simplified direct hash function for Node.js */
export declare function hashFileSync(path: string): NapiResult
/** Simplified direct hash function for bytes */
export declare function hashBytesSync(data: Buffer): NapiResult
/** Get SIMD capabilities */
export declare function getSimdSupport(): string
/** Run performance benchmark */
export declare function benchmarkHash(testSize: number): Promise<NapiResult>
/** Main Retrigger wrapper for Node.js */
export declare class RetriggerWrapper {
  /** Create a new Retrigger instance */
  constructor()
  /**
   * Watch a directory for changes
   *
   * # Safety
   * This function is marked unsafe due to napi-rs requirements for async functions.
   * It's safe to call from Node.js as the underlying operations are memory-safe.
   */
  watchDirectory(path: string, options?: WatchOptions | undefined | null): Promise<NapiResult>
  /**
   * Start the file watcher
   *
   * # Safety
   * This function is marked unsafe due to napi-rs requirements for async functions.
   * It's safe to call from Node.js as the underlying operations are memory-safe.
   */
  start(): Promise<NapiResult>
  /**
   * Get the next file event (non-blocking)
   *
   * # Safety
   * This function is marked unsafe due to napi-rs requirements for async functions.
   * It's safe to call from Node.js as the underlying operations are memory-safe.
   */
  pollEvent(): Promise<NapiResult>
  /**
   * Wait for the next file event with timeout
   *
   * # Safety
   * This function is marked unsafe due to napi-rs requirements for async functions.
   * It's safe to call from Node.js as the underlying operations are memory-safe.
   */
  waitEvent(timeoutMs: number): Promise<NapiResult>
  /** Get watcher statistics */
  getStats(): Promise<NapiResult>
  /** Hash a file directly */
  hashFile(path: string): Promise<NapiResult>
  /** Hash bytes directly */
  hashBytes(data: Buffer): NapiResult
  /** Get SIMD optimization level */
  getSimdLevel(): string
}
