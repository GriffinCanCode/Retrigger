name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        default: 'patch'

jobs:
  build:
    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build --target x86_64-unknown-linux-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |
              sudo apt-get update
              sudo apt-get install -y musl-tools
              npm run build --target x86_64-unknown-linux-musl

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              npm run build --target aarch64-unknown-linux-gnu

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
              npm run build --target aarch64-unknown-linux-musl

          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: |
              sudo apt-get update
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              npm run build --target armv7-unknown-linux-gnueabihf

          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build --target x86_64-apple-darwin

          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build --target aarch64-apple-darwin

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build --target x86_64-pc-windows-msvc

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: npm run build --target aarch64-pc-windows-msvc

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: npm
        cache-dependency-path: src/bindings/nodejs/package-lock.json

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.settings.target }}

    - name: Install Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.11.0

    - name: Install system dependencies (Ubuntu)
      if: matrix.settings.host == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang llvm-dev pkg-config liburing-dev

    - name: Install system dependencies (macOS)
      if: matrix.settings.host == 'macos-latest'
      run: |
        brew install llvm pkg-config

    - name: Install dependencies
      run: |
        cd src/bindings/nodejs
        npm ci

    - name: Build native module
      run: |
        cd src/bindings/nodejs
        ${{ matrix.settings.build }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bindings-${{ matrix.settings.target }}
        path: src/bindings/nodejs/*.node
        if-no-files-found: error

  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        registry-url: 'https://registry.npmjs.org'
        cache: npm
        cache-dependency-path: src/bindings/nodejs/package-lock.json

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        cd src/bindings/nodejs
        npm ci

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Move artifacts to bindings directory
      run: |
        cd artifacts
        for dir in bindings-*; do
          if [ -d "$dir" ]; then
            cp $dir/*.node ../src/bindings/nodejs/ 2>/dev/null || true
          fi
        done
        cd ../src/bindings/nodejs
        ls -la *.node

    - name: Create npm packages
      run: |
        cd src/bindings/nodejs
        npm run prepublishOnly

    - name: Publish to npm
      run: |
        cd src/bindings/nodejs
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
